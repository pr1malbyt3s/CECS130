/*
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Aaron Williams
CECS 130-50
Assignment 4
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
*/




/*
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Code Name: problem_01.c
Author: Aaron Williams
Class: CECS 130-50
Assignment 4
Version: 1.0
Description: This program creates a struct car and creates an instance.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
*/

#include <stdio.h>
#include <string.h>

/*Part 1) Create a structure called car with the following members:
make, model, year, miles */

struct car {
	char *make;
	char *model;
	int year;
	float miles;
};

/*Part 2) Create an instance of the car structure named myCar, and assign
data to each of the members. Print the contents of each member to standard
output using the printf() function */

int main(void) {

	struct car myCar;
	
	myCar.make = "Chevrolet";
	myCar.model = "Silverado";
	myCar.year = 2004;
	myCar.miles = 27984.6;
	
	printf("Make: %-20s\nModel: %-20s\nYear: %-4d\nMiles: %-6.1f\n", 
	myCar.make, myCar.model, myCar.year, myCar.miles);
		
	return 0;

}

/*
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Code Name: problem_02.c
Author: Aaron Williams
Class: CECS 130-50
Assignment 4
Version: 1.0
Description: This program allocates memory for a user's name using the calloc()
function. A user is prompted to enter their name to standard input. The program 
then uses a loop to iterate the memory in order to count the number of 
characters in the users name. The number of characters in the users name is 
then printed to standard output.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
*/

#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <stdlib.h>

int main(int argc, char const *argv[]) {
	
	char *myName = NULL;
	int nameSize = 30;
	int rc = 0;
	int i = 0;
	
	//Initialize count at -1 to account for null byte appended to name.
	int count= -1;
	
	myName = (char *)calloc(nameSize, sizeof(char));
	
	if(myName != NULL) {
		printf("Please enter your name:\n");
		fgets(myName, 30, stdin);
	
		while(myName[i] != 0) { //Excludes unused portions of memory
			if(myName[i] != 32) //Excludes spaces
				count += 1;
			
			i++;
		}
		printf("\nLetter count: %d\n", count);
		free(myName);
	}
	else {
		printf("Failed allocating memory\n"); //Error Handling
		rc = -1;
	}
	return rc;
}


/*
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Code Name: problem_03.c
Author: Aaron Williams
Class: CECS 130-50
Assignment 4
Version: 1.0
Description: This program incorporates the file superheroes.dat. This program
uses the fscanf() function to read each record from superheroes.dat and prints
field information from the records to standard output.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
*/

#include <stdio.h>
#include <stdlib.h>

int main(int argc, char const *argv[]) {
	
	FILE *fp;
	char readLine[100];
	char *fileName = "superheroes.dat";
	fp = fopen(fileName, "r");
	
	if(fp != NULL) {
		fprintf(stdout, "\nReading: %s\n", fileName);
		int i = 1;
		while(!feof(fp)) {
			fscanf(fp, "%100[^\n]\n", readLine); //Ingests entire line.
			printf("\nSuperhero %d: %s", i, readLine);
			i++;
		}
		fclose(fp);
	}
	
	//Error handling.
	else {
		perror("The following error occured");
		fprintf(stderr, "\nCannot open %s.\n\n", fileName);
	}
	printf("\n");
	return 0;
}

/*
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
superheroes.dat for problem_03.c
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
*/

Spiderman- Does whatever a spider can.
The Flash- Is really fast.
The Hulk- Super-strength.
Deadpool- Superhuman healing.

/*
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Code Name: problem_04.cpp
Author: Aaron Williams
Class: CECS 130-50
Assignment 4
Version: 1.0
Description: This program has two parts associated with it to support answering
questions regarding the size of a string and the length of an array. Part a
determines the length of the array char s[] = "Hello World" and part b
determines the size of the string "Hello World".
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
*/

#include <string>
#include <iostream>
#include <cstring>
 
 int main(int argc, char const *argv[]) {
	
	using std::cout;
	using std::endl;
	using std::string;
	
	//Part A
	char s[] = "Hello World";
	cout << "char s[] = " << s << endl;
	cout << "Length of s = " << strlen(s) << "." << endl;
	
	cout << " " << endl;
	
	//Part B
	string s1;
	string str = "Hello World"; //strcpy not used in c++, str.copy() used for char arrays
	s1 = str; //Copies "Hello World" to s1
	cout << "String s1  = " << s1 << endl;
	cout << "Size of s1 = " << s1.length() << "." << endl; //Could also be accomplished by using strlen(s1.c_str())
	
	return 0;
		
}

/*
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Code Name: problem_05.txt
Author: Aaron Williams
Class: CECS 130-50
Assignment 4
Version: 1.0
Description: This is not an executable program. It is a text file that lists
three reasons to use dynamic memory.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
*/

1) Dynamic memory allocation can be used when one is unsure of exactly how much memory to allocate,
 as it allows for allocation at run-time instead of compilation time.

2) Dynamic memory only utilizes the amount of memory required.

3) Dynamic memory allows for a large block of memory to be efficiently allocated and persist.