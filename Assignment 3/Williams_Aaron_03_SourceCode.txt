/*
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Code Name: problem_01.c
Author: Aaron Williams
Class: CECS 130-50
Assignment 3
Version: 1.0
Description: This program stores 10 numbers input by the user. After the user
has input 10 numbers, they will be given the option to print the numbers in
ascending or descending order.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
*/

#include <stdio.h>

int main(int agrc, char const *argv[]) {

	//Variable initialization.
	int i, a, b, iResponse, iTemp;
	double dArray[10];
	
	//User input by number.
	for(i = 1; i < 11; i++) {
		printf("\nPlease enter number %d: ", i);
		scanf("%lf", &dArray[i - 1]);
	}
	
	//Sorts the array in ascending order.
	for(a = 0; a < 9; a++) {
		for(b = 0; b < 9; b++) {
			if (dArray[b + 1] < dArray[b]) {
				iTemp = dArray[b];
				dArray[b] = dArray[b + 1];
				dArray[b + 1] = iTemp;
			}
		}
	}
	
	//Prompts user for sorting decision.
	printf("\nYou have two sorting options, ascending or descending.\n");
	printf("For ascending, enter 1. For descending, enter 2: ");
	scanf("%d", &iResponse);
	
	//Ascending response. Prints the array in ascending order.
	if(iResponse == 1) {
		printf("\nThe array sorted in ascending order:\n");
		for(i = 0; i < 10; i++) {
			printf("%6.2lf\n", dArray[i]);
		}
	}
	
	//Descending response. Prints the array in descending order.
	if(iResponse == 2) {
		printf("\nThe array sorted in descending order:\n");
		for(i = 9; i >= 0; i--) {
			printf("%6.2lf\n", dArray[i]);
		}
	}
	
	//Validates user input for sorting option.
	if(iResponse != 1 && iResponse != 2) {
		printf("\nPlease enter a valid option.\n");
	}
	
	
	
	return 0;
}




/*
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Code Name: problem_02.c
Author: Aaron Williams
Class: CECS 130-50
Assignment 3
Version: 1.0
Description: This program is a GPA average calculator. The user is prompted to 
store up to 30 GPAs. After each GPA, the user is given the option to display the
current average or enter the next GPA. The average of all entered GPAs will be 
displayed once all GPAs are entered.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
*/

#include <stdio.h>
#include <stdlib.h>

int main(int argc, char const *argv[]) {
	
	//Variable initialization.
	int iSize, i;
	double dAverage, dTotal;
	char cChoice;
	
	//Prompt user for number of GPAs to enter.
	printf("\nHow many GPAs would you like to enter? (30 is the max.): ");
	scanf("%d", &iSize);
	
	//Quick bounds check for number of GPAs.
	if(iSize > 30) {
		printf("\n%d is too many GPAs to calculate.\n", iSize);
		exit(0);
	}
	
	//Initialize GPA array.
	double dArray[iSize];
	
	/*Prompt user to input GPA values. Give option for
	average output after each GPA is entered. */
	for(i = 0; i < iSize; i++) {
		printf("\nEnter GPA %d: ", i + 1);
		scanf("%lf", &dArray[i]);
		dTotal += dArray[i];
		dAverage = (dTotal / (i + 1));
		printf("\nWould you like to calculate the current average? Enter Y or N: ");
		scanf(" %c", &cChoice);
		if(cChoice == 'y' || cChoice == 'Y') {
			printf("\nCurrent average = %1.2lf", dAverage);
		}
		if(cChoice != 'y' && cChoice != 'Y' && cChoice != 'n' && cChoice != 'N') {
			printf("\nCouldn't interpret response, moving on.");
		}
		continue;
	}
	
	//Print summary of GPAs and total average.
	printf("\nSummary:");
	printf("\n-----------\n");
	for(i = 0; i < iSize; i++) {
		printf("\nGPA %d = %1.2lf", i + 1, dArray[i]);
	}
	printf("\nTotal average = %1.2lf\n", dAverage);
	
	return 0;
	
}





/*
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Code Name: problem_03.c
Author: Aaron Williams
Class: CECS 130-50
Assignment 3
Version: 1.0
Description: This program performs multiple functions in relation to three 
non-pointer variables with matching pointer variables.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
*/

#include <stdio.h>

int main(int argc, char const *argv[]) {

	//Variable initialization.
	int *iPtr;
	char *cPtr;
	float *fFloat;
	int iNumber;
	char cCharacter;
	float fNumber;
	
	//Prompts user for value input.
	printf("\nPlease enter an integer: ");
	scanf("%d", &iNumber);
	printf("\nPlease enter a character: ");
	scanf(" %c", &cCharacter);
	printf("\nPlease enter a float: ");
	scanf("%f", &fNumber);
	
	//Assigns nonpointer addresses to pointer variables.
	iPtr = &iNumber;
	cPtr = &cCharacter;
	fFloat = &fNumber;
	
	//Prints the value of each nonpointer variable.
	printf("\nNonpointer values:");
	printf("\n---------------------");
	printf("\nThe value of iNumber is %d", iNumber);
	printf("\nThe value of cCharacter is %c", cCharacter);
	printf("\nThe value of fNumber is %f\n", fNumber);
	
	//Prints the value of each pointer variable.
	printf("\nPointer values:");
	printf("\n---------------------");
	printf("\nThe value of *iPtr is %d", *iPtr);
	printf("\nThe value of *cPtr is %c", *cPtr);
	printf("\nThe value of *fFloat is %f\n", *fFloat);
	
	//Prints the address of each nonpointer variable.
	printf("\nNonpointer addresses:");
	printf("\n---------------------");
	printf("\nThe address of iNumber is %p", &iNumber);
	printf("\nThe address of cCharacter is %p", &cCharacter);
	printf("\nThe address of fNumber is %p\n", &fNumber);
	
	//Prints the address of each pointer variable.
	printf("\nPointer addresses:");
	printf("\n---------------------");
	printf("\nThe address of *iPtr is %p", iPtr);
	printf("\nThe address of *cPtr is %p", cPtr);
	printf("\nThe address of *fFloat is %p\n", fFloat);
	
	return 0;
	
}




/*
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Code Name: problem_04.c
Author: Aaron Williams
Class: CECS 130-50
Assignment 3
Version: 1.0
Description: This program is a dice rolling game. It allows a user to toss up
to six dice at one time. It prints the results after the users roll.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
*/

#include <stdio.h>
#include <time.h>
#include <ctype.h>
#include <stdlib.h>

//Function declaration to prevent errors.
int TossDie(int[]);

//Global variable initialization.
int iDieNumber = 6;

int main(int argc, char const *argv[]) {

	//Variable initialization.
	char cResponse = 'y';
	
	//While loop allowing user to roll dice multiple times before program exits.
	while(cResponse == 'y' || cResponse == 'Y') {
		printf("\nHow many dice would you like to roll? Enter 1-6: ");
		scanf("%d", &iDieNumber);
		
		//Error checking for number of dice.
		if(iDieNumber > 6) {
			printf("\nSorry, you can only roll up to 6 Die.\n");
			exit(0);
		}
		
		//Array creation.
		int iArray[iDieNumber];
		TossDie(iArray);
		printf("\nDo you want to roll again? Enter y or n: ");
		scanf(" %c", &cResponse);
		
		//Error checking for user input.
		if(cResponse != 'y' && cResponse != 'Y' && cResponse != 'n' &&cResponse != 'N') {
			printf("\nSorry, could not interpret input... Exiting.\n");
			exit(0);
		}
	}
	printf("\n");
	
	return 0;
}

//TossDie function.
int TossDie(int Array[iDieNumber]) {

	int i;
	srand(time(NULL));
	
	for(i = 0; i < iDieNumber; i++) {
		Array[i] = (rand() % 6) + 1;
		printf("\nDice %d rolled a %d", i + 1, Array[i]);
	}
	
	return 0;
}





/*
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Code Name: problem_05.c
Author: Aaron Williams
Class: CECS 130-50
Assignment 3
Version: 1.0
Description: This program reads a users name as input. It then determines
the number of characters and displays the name in uppercase.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

int main(int argc, char const *argv[]) {

	//Variable initialization.
	int i, l;
	char sName[25] = {'\0'};

	//Gets users name from input.
	printf("\nPlease enter your name: ");
	scanf("%s", sName);
	
	//Bounds checking for name length.
	if(strlen(sName) > 25) {
		printf("\nPlease enter a name less than 25 characters.\n");
		exit(0);
	}
	
	//Determines number of characters in users name.
	l = strlen(sName);
	printf("\nThere are %d characters in your name, %s.\n", l, sName);
	
	//Outputs users name in uppercase.
	printf("\nYour name in uppercase: ");
	for(i = 0; i < l; i++) {
		putchar(toupper(sName[i]));
	}
	printf("\n");
	
	
	return 0;


}





/*
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Code Name: problem_06.c
Author: Aaron Williams
Class: CECS 130-50
Assignment 3
Version: 1.0
Description: This program creates an array of strings. It then uses the 
strcmp() function to display each states name in alphabetical order.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
*/

#include <stdio.h>
#include <string.h>

//Function declaration to prevent errors.
int sort(char *[]);

int main(int argc, char const *argv[]) {
		
		//Variable initialization.
		int i;
		int numStates = 4;
		char *states[4] = {0};
		
		//Assign states to the array.
		states[0] = "Florida";
		states[1] = "Oregon";
		states[2] = "California";
		states[3] = "Georgia";
		
		//Shows the original order of the states array.
		printf("\nCurrent order: ");
		printf("\n--------------\n");
		for(i = 0; i < numStates; i++) {
			printf("%s", states[i]);
			printf("\n");
		}
		
		//Call the sort function.
		sort(states);
		
		//Shows the sorted states array.
		printf("\nAlphabetized order: ");
		printf("\n-------------------\n");
		for(i = 0; i < numStates; i++) {
			printf("%s", states[i]);
			printf("\n");
		}
		
		return 0;
}

//Sort function.
int sort(char *Array[]) {

	int a, b;
	int numStates = 4;
	char *sTemp;
	
	for(a = 0; a < numStates - 1; a++) {
		for(b = a + 1; b < numStates; b++) {
			if((strcmp(Array[a], Array[b])) > 0) {
				sTemp = Array[a];
				Array[a] = Array[b];
				Array[b] = sTemp;
			}
		}
	}
	
	return 0;
}